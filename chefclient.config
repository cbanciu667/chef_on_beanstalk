files:
  "C:\\WINDOWS\\system32\\GroupPolicy\\Machine\\Scripts\\scripts.ini":
    content: |

      [Shutdown]
      0CmdLine=C:\chef\remove_chef.cmd
      0Parameters=
  "c:\\temp\\chef_client.ps1":
      content: |
        # variables section
        $strClientPemFile="C:\chef\client.pem"
        $chefFolder="C:\chef"
        $strClientRbFile="C:\chef\client.rb"
        $strKnifeRbFile="C:\chef\knife.rb"
        $strChefRemoveScript="C:\chef\remove_chef.cmd"
        $instanceId=Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/instance-id
        $env:INSTANCE_ID = $instanceId
        $s3Bucket=$args[0]
        $s3Prefix=$args[1]
        $chefEnv=$args[2]
        $chefRunlist=$args[3]
        $chefOrg=$args[4]

        # create timestamp for log files
        function Get-TimeStamp {
          return "[{0:MM/dd/yy} {0:HH:mm:ss}]" -f (Get-Date)
        }

        # function to check if chef is installed
        function Check-ProgramInstalled
        {
            # paths: x86 and x64 registry keys are different
            if ([IntPtr]::Size -eq 4) {
                $path = 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*'
            }
            else {
                $path = @(
                    'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*'
                    'HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*'
                )
            }
            # get all data
            Get-ItemProperty $path |
            # use only with name and unistall information
            #.{process{ if ($_.DisplayName -and $_.UninstallString) { $_ } }} |
            # select more or less common subset of properties
            Select-Object DisplayName, Publisher, InstallDate, DisplayVersion, HelpLink, UninstallString |
            # and finally sort by name
            Sort-Object DisplayName | Where-Object { ($_."DisplayName" ) -like "*Chef*" };
        }

        # main block creating chef folder and chef configuration
        If (Test-Path $strClientPemFile){
            Write-Output "$(Get-TimeStamp) Chef Client already installed and configured. Nothing to do." | Out-file C:\chef\chef_installation_status.txt -append
        } Else {
            If (Test-Path -Path $chefFolder){
              Remove-Item $chefFolder\* -Force -Confirm:$false -Recurse
            } else {
              md -Path c:\chef
            }
            Set-StrictMode -Version Latest
            $cmdPath = "C:\Program Files\Amazon\AWSCLI\aws.exe"
            $bucketURL = 's3://' + $s3Bucket + '/' + $s3Prefix + '/'
            $cmdArgList = @(
              "s3",
              "sync",
              $bucketURL,
              "c:\chef\"
              )
            & $cmdPath $cmdArgList >"$chefFolder\S3SyncOutput_log.txt"
            Write-Output "$(Get-TimeStamp) Finished sync of chef folder with S3 bucket." | Out-file C:\chef\chef_installation_status.txt -append

            # client.rb build
            If (!(Test-Path $strClientRbFile)){
              Write-Output "$(Get-TimeStamp) Creating chef client.rb..." | Out-file C:\chef\chef_installation_status.txt -append
              Add-Content $strClientRbFile "chef_server_url  `"https://api.opscode.com/organizations/$chefOrg`""
              Add-Content $strClientRbFile "encrypted_data_bag_secret `"c:/chef/encrypted_data_bag_secret`""
              Add-Content $strClientRbFile "validation_client_name `"$chefOrg-validator`""
              Add-Content $strClientRbFile "node_name `"$instanceId`""
              Add-Content $strClientRbFile "file_cache_path   `"c:/chef/cache`""
              Add-Content $strClientRbFile "file_backup_path  `"c:/chef/backup`""
              Add-Content $strClientRbFile "cache_options     ({:path => `"c:/chef/cache/checksums`", :skip_expires => true})"
              Add-Content $strClientRbFile "log_level        :info"
              Add-Content $strClientRbFile "log_location `"c:/chef/client.log`""
            } else {
              Write-Output "$(Get-TimeStamp) client.rb exists, skiping creation..." | Out-file C:\chef\chef_installation_status.txt -append
            }

            # knife.rb build
            If (!(Test-Path $strKnifeRbFile)){
              Write-Output "$(Get-TimeStamp) Creating chef knife.rb..." | Out-file C:\chef\chef_installation_status.txt -append
              Add-Content $strKnifeRbFile "chef_server_url  `"https://api.opscode.com/organizations/$chefOrg`""
              Add-Content $strKnifeRbFile "client_key `"c:/chef/client.pem`""
              Add-Content $strKnifeRbFile "node_name `"$instanceId`""
            } else {
              Write-Output "$(Get-TimeStamp) knife.rb exists, skiping creation..." | Out-file C:\chef\chef_installation_status.txt -append
            }

            # node remove cmd
            If (!(Test-Path $strChefRemoveScript)){
              Write-Output "$(Get-TimeStamp) Creating remove chef node cmd..." | Out-file C:\chef\chef_installation_status.txt -append
              Add-Content $strChefRemoveScript "knife node delete $instanceId -y -c C:\chef\knife.rb & knife client delete $instanceId -y -c C:\chef\knife.rb & del /F /Q C:\chef\client.pem"
            } else {
              Write-Output "$(Get-TimeStamp) chef node cmd exists, skiping creation..." | Out-file C:\chef\chef_installation_status.txt -append
            }

            # chef installation
            if (Check-ProgramInstalled) {
              Write-Output "$(Get-TimeStamp) Chef Client already installed but NOT configured. Proceeding with bootstraping..." | Out-file C:\chef\chef_installation_status.txt -append
            } Else {
              Write-Output "$(Get-TimeStamp) Chef Client NOT installed. Installing chef client..." | Out-file C:\chef\chef_installation_status.txt -append
              msiexec /qn /i c:\chef\chef-client-12.21.14-1-x64.msi ADDLOCAL="ChefClientFeature,ChefServiceFeature,ChefPSModuleFeature"
              while (!(Test-Path $cmdPath)) { Start-Sleep 10 }
            }
         }
packages:
  msi:
    awscli: https://s3.amazonaws.com/aws-cli/AWSCLI64.msi
container_commands:
  01_chefcl_command:
    command: powershell.exe -Command "c:\\temp\\chef_client.ps1 %CHEF_S3_BUCKET% %CHEF_S3_PREFIX% %CHEF_ENVIRONMENT% %CHEF_RUNLIST% %CHEF_ORG% | out-null"
    waitAfterCompletion: 0
  02_chefcl_converge_command:
    command: powershell.exe -Command "C:\opscode\chef\bin\chef-client.bat -r %CHEF_RUNLIST% -E %CHEF_ENVIRONMENT% | out-null"
    waitAfterCompletion: 0
  03_updpolicy1_command:
    command: C:\windows\regedit.exe /S c:\chef\shutdown_script.reg
    waitAfterCompletion: 0
  04_updpolicy2_command:
    command: C:\windows\system32\gpupdate.exe /force
    waitAfterCompletion: 0
